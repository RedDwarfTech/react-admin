{"version":3,"sources":["views/Index/line.jsx","service/global/DashboardService.js","views/Index/Index.jsx","views/Index/index.js","api/XHRClient.js"],"names":["Line","state","trend","request","config","method","url","data","JSON","stringify","requestWithAction","getTrendAction","fetchTrend","this","props","Object","keys","length","undefined","lineElement","document","getElementById","myChart","echarts","init","setOption","tooltip","trigger","legend","grid","left","right","bottom","containLabel","toolbox","feature","saveAsImage","xAxis","type","boundaryGap","Set","map","item","moment","unix","parseInt","statistic_time","format","yAxis","series","name","filter","trend_item","incre_num","sort","a","b","window","addEventListener","resize","id","style","height","Component","Index","fullToggle","screenfull","isEnabled","getDashboardAction","fetchDashboard","dashboard","className","gutter","span","AppleOutlined","app_count","isRrefreshingAccessToken","requests","instance","axios","create","timeout","redirectToLogin","store","dispatch","removeUserAction","location","href","action","then","response","result","catch","error","console","defaults","headers","post","interceptors","use","accessToken","localStorage","getItem","Promise","reject","status","statusCode","resultCode","resolve","errorMessage","msg","push","token","baseURL","refreshToken","requestWithoutAction","deviceId","app","refreshAccessTokenImpl","refreshAccessToken","refreshResult","setItem","forEach","cb","res","finally","handleRefreshAccessToken","log"],"mappings":"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","file":"static/js/index.9b449d3a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport echarts from 'echarts/lib/echarts'\nimport 'echarts/lib/chart/line'\nimport 'echarts/lib/component/tooltip'\nimport 'echarts/lib/component/title'\nimport 'echarts/lib/component/legend'\nimport moment from 'moment'\nimport { fetchTrend } from '@/service/global/DashboardService'\n\nclass Line extends Component {\n    state = {\n        trend: {}\n    }\n\n    componentDidMount() {\n        fetchTrend({})\n    }\n    render() {\n        let data = this.props.trend\n\n        if ((data && Object.keys(data).length === 0) || data === undefined) {\n        } else {\n            let lineElement = document.getElementById('line')\n            if (lineElement == null) {\n                return <div>暂无数据</div>\n            }\n            let myChart = echarts.init(lineElement)\n            myChart.setOption({\n                tooltip: {\n                    trigger: 'axis'\n                },\n                legend: {\n                    data: ['文章', '频道', '编辑选择文章']\n                },\n                grid: {\n                    left: '3%',\n                    right: '4%',\n                    bottom: '3%',\n                    containLabel: true\n                },\n                toolbox: {\n                    feature: {\n                        saveAsImage: {}\n                    }\n                },\n                xAxis: {\n                    type: 'category',\n                    boundaryGap: false,\n                    data:\n                        this.props.trend.length > 0\n                            ? [\n                                  ...new Set(\n                                      this.props.trend.map(item => {\n                                          return moment.unix(parseInt(item.statistic_time) / 1000).format('YYYY-MM-DD')\n                                      })\n                                  )\n                              ]\n                            : ['']\n                },\n                yAxis: {\n                    type: 'value'\n                },\n                series: [\n                    {\n                        name: '文章',\n                        type: 'line',\n                        data:\n                            this.props.trend.length > 0\n                                ? this.props.trend.filter(item => item.trend_item === 1).map(item => item.incre_num)\n                                : [1]\n                    },\n                    {\n                        name: '频道',\n                        type: 'line',\n                        data:\n                            this.props.trend.length > 0\n                                ? this.props.trend\n                                      .filter(item => item.trend_item === 2)\n                                      .sort((a, b) => a.statistic_time - b.statistic_time)\n                                      .map(item => item.incre_num)\n                                : [1]\n                    },\n                    {\n                        name: '编辑选择文章',\n                        type: 'line',\n                        data:\n                            this.props.trend.length > 0\n                                ? this.props.trend.filter(item => item.trend_item === 3).map(item => item.trend_item)\n                                : [1]\n                    }\n                ]\n            })\n\n            window.addEventListener('resize', function() {\n                myChart.resize()\n            })\n        }\n\n        return <div id='line' style={{ height: 300 }}></div>\n    }\n}\n\nexport default Line\n","import { getDashboardAction, getTrendAction } from '../../actions/DashboardActions'\nimport { requestWithAction } from '../../api/XHRClient'\n\nexport function fetchDashboard(request) {\n    const config = {\n        method: 'get',\n        url: `/manage/home/v1/dashboard/overview`,\n        data: JSON.stringify(request)\n    }\n    return requestWithAction(config, getDashboardAction)\n}\n\nexport function fetchTrend(request) {\n    const config = {\n        method: 'post',\n        url: `/manage/home/v1/trend/overview`,\n        data: JSON.stringify(request)\n    }\n    return requestWithAction(config, getTrendAction)\n}\n","import React, { Component } from 'react'\nimport { Layout, Row, Col } from 'antd'\nimport screenfull from 'screenfull'\nimport '@/style/view-style/index.scss'\nimport LineEcharts from './line.jsx'\nimport { fetchDashboard } from '@/service/global/DashboardService'\nimport { AppleOutlined } from '@ant-design/icons'\n\nclass Index extends Component {\n    componentDidMount() {\n        fetchDashboard('')\n    }\n\n    fullToggle = () => {\n        if (screenfull.isEnabled) {\n            screenfull.request(document.getElementById('bar'))\n        }\n    }\n    render() {\n        let data = this.props.dashboard.dashboard\n\n        if ((data && Object.keys(data).length === 0) || data === undefined) {\n            return <div>loading...</div>\n        }\n\n        return (\n            <Layout className='index animated fadeIn'>\n                <Row gutter={24} className='index-header'>\n                    <Col span={6}>\n                        <div className='base-style wechat'>\n                            <AppleOutlined type='app' className='icon-style' />\n                            <div>\n                                <span>{data.app_count}</span>\n                                <div>应用数</div>\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n                <Row gutter={8}>\n                    <Col span={12}>\n                        <div className='base-style'>\n                            <LineEcharts trend={this.props.dashboard.trend} />\n                        </div>\n                    </Col>\n                </Row>\n            </Layout>\n        )\n    }\n}\n\nexport default Index\n","import Index from './Index.jsx'\n\nexport default Index\n","import axios from 'axios'\nimport store from '../store/index'\nimport { message } from 'antd'\nimport { removeUserAction } from '../actions/UserActions'\n\nlet isRrefreshingAccessToken = false\n// 重试队列，每一项将是一个待执行的函数形式\nlet requests = []\n\nconst instance = axios.create({\n    timeout: 15000\n})\n\ninstance.defaults.headers.post['Content-Type'] = 'application/json'\n\ninstance.interceptors.request.use(\n    config => {\n        const accessToken = localStorage.getItem('accessToken')\n        accessToken && (config.headers['x-access-token'] = accessToken)\n        return config\n    },\n    error => {\n        return Promise.reject(error)\n    }\n)\n\ninstance.interceptors.response.use(\n    response => {\n        if (response.status === 200 && response.data.statusCode === '200' && response.data.resultCode === '200') {\n            return Promise.resolve(response)\n        } else if (response.data.statusCode === '907') {\n            redirectToLogin()\n        } else if (response.data.statusCode === '904') {\n            //登录已失效\n            redirectToLogin()\n        } else if (response.data.resultCode === '00100100004016') {\n            handleRefreshAccessToken(response)\n        } else {\n            let errorMessage = response.data.msg\n            message.error(errorMessage)\n            return Promise.reject(response)\n        }\n    },\n    error => {\n        // 比如： token 过期， 无权限访问， 路径不存在， 服务器问题等\n        switch (error.response.status) {\n            case 401:\n                break\n            case 403:\n                break\n            case 404:\n                break\n            case 500:\n                break\n            default:\n                console.log('其他错误信息')\n        }\n        return Promise.reject(error)\n    }\n)\n\nexport function redirectToLogin() {\n    store.dispatch(removeUserAction(''))\n    window.location.href = '/#/login'\n}\n\nfunction handleRefreshAccessToken(response) {\n    const config = response.config\n    if (!isRrefreshingAccessToken) {\n        isRrefreshingAccessToken = true\n        // access token invalid\n        refreshAccessToken()\n            .then(refreshResult => {\n                let accessToken = refreshResult.accessToken\n                if (accessToken) {\n                    localStorage.setItem('token', accessToken)\n                    localStorage.setItem('accessToken', accessToken)\n                    // retry the last request\n                    instance.defaults.headers['x-access-token'] = accessToken\n                    requests.forEach(cb => cb(accessToken))\n                    requests = []\n                    return instance(config)\n                }\n            })\n            .catch(res => {\n                console.error('refreshtoken error =>', res)\n                redirectToLogin()\n            })\n            .finally(() => {\n                isRrefreshingAccessToken = false\n            })\n    } else {\n        // 正在刷新token，将返回一个未执行resolve的promise\n        return new Promise(resolve => {\n            // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行\n            requests.push(token => {\n                config.baseURL = ''\n                config.headers['x-access-token'] = token\n                resolve(instance(config))\n            })\n        })\n    }\n}\n\nfunction refreshAccessToken() {\n    const refreshToken = localStorage.getItem('refreshToken')\n    if (!refreshToken) {\n        redirectToLogin()\n    }\n    return refreshAccessTokenImpl(refreshToken)\n}\n\nfunction refreshAccessTokenImpl(refreshToken) {\n    const urlParams = {\n        deviceId: 'xxxxxx',\n        app: 6,\n        refreshToken: refreshToken\n    }\n    const config = {\n        method: 'post',\n        url: `/manage/auth/access_token/refresh`,\n        data: urlParams\n    }\n    return requestWithoutAction(config)\n}\n\nexport function requestWithAction(config, action) {\n    return instance(config)\n        .then(response => {\n            if (response) {\n                const data =\n                    response.data.result == null || Object.keys(response.data.result).length === 0\n                        ? {}\n                        : response.data.result\n                store.dispatch(action(data))\n            }\n        })\n        .catch(error => {\n            console.error(error)\n        })\n}\n\nexport function requestWithoutAction(config) {\n    return instance(config)\n        .then(response => {\n            if (response) {\n                const data =\n                    response.data.result == null || Object.keys(response.data.result).length === 0\n                        ? {}\n                        : response.data.result\n                return data\n            }\n        })\n        .catch(error => {\n            console.error(error)\n        })\n}\n"],"sourceRoot":""}