{"version":3,"file":"748.js","mappings":"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","sources":["webpack://react-admin/./src/views/App/Cernitor/Domain/Domain.jsx","webpack://react-admin/./src/views/App/Cernitor/Domain/index.js"],"sourcesContent":["import React, { Component } from 'react'\nimport CustomBreadcrumb from '@/components/CustomBreadcrumb'\nimport { Layout, Divider, Row, Col, Input, Table, Button, notification, Form, Tag, Tabs, Card, Modal } from 'antd'\nimport { SearchOutlined } from '@ant-design/icons'\nimport '@/style/view-style/table.scss'\nimport { withRouter } from 'react-router-dom'\nimport { getChannelList, editChannel, editorPickChannel } from '@/service/app/cruise/channel/ChannelService'\nimport { getDomainPage } from '@/service/app/cernitor/domain/DomainService'\nimport { getOrderByClause } from '@/api/StringUtil'\nimport Highlighter from 'react-highlight-words'\nimport queryString from 'query-string'\nimport dayjs from 'dayjs'\nimport { InfoCircleOutlined } from '@ant-design/icons'\n\nconst { TabPane } = Tabs\nclass Domain extends Component {\n    state = {\n        loading: false,\n        pageNum: 1,\n        pageSize: 10,\n        channelId: null,\n        editorPick: null,\n        name: null,\n        defaultActiveKey: 1,\n        showModal: false\n    }\n\n    enterLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    onPageChange = (current, e) => {\n        if (e === undefined) {\n            // 如果是点击翻页触发的事件，e为10\n            // 如果是由检索等其他操作触发的页面改变事件，则e为undefined\n            // 不做任何操作\n            // 避免事件重复触发\n            return\n        }\n        this.setState({\n            pageNum: current\n        })\n        let request = {\n            pageSize: this.state.pageSize,\n            pageNum: current\n        }\n        getDomainPage(request)\n    }\n\n    changePageSize(pageSize, current) {\n        this.setState({\n            pageSize: pageSize\n        })\n        let request = {\n            pageSize: pageSize,\n            pageNum: this.state.pageNum\n        }\n        getDomainPage(request)\n    }\n\n    componentDidMount() {\n        let params = queryString.parse(this.props.location.search)\n        if ((params && Object.keys(params).length === 0) || params === undefined) {\n            let request = {\n                pageSize: this.state.pageSize,\n                pageNum: this.state.pageNum\n            }\n            getDomainPage(request)\n            return\n        }\n        this.setState({\n            channelId: params.channelId\n        })\n        let request = {\n            pageSize: this.state.pageSize,\n            pageNum: this.state.pageNum,\n            subSourceId: params.channelId\n        }\n        getDomainPage(request)\n    }\n\n    componentWillUnmount() {\n        notification.destroy()\n        this.timer && clearTimeout(this.timer)\n    }\n\n    onChange = (pagination, filters, sorter, extra) => {\n        if (Object.keys(sorter).length === 0 && Object.keys(filters) === 0) {\n            return\n        }\n        let request = {\n            pageSize: this.state.pageSize,\n            pageNum: this.state.pageNum,\n            orderByClause: sorter && Object.keys(sorter).length === 0 ? '' : getOrderByClause(sorter),\n            editorPick:\n                Object.keys(filters).length === 0 || filters.editorPick === undefined ? null : filters.editorPick[0]\n        }\n        getDomainPage(request)\n    }\n\n    cancelSub = (text, record) => {\n        let request = {\n            id: record.id,\n            subStatus: record.subStatus === 1 ? 0 : 1\n        }\n        editChannel(request)\n    }\n\n    showArticles = record => {\n        this.props.history.push('/app/cruise/article?channelId=' + encodeURIComponent(record.id))\n    }\n\n    editorPick = record => {\n        let request = {\n            id: record.id,\n            editor_pick: record.editorPick === 1 ? 0 : 1\n        }\n        editorPickChannel(request)\n    }\n\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={e => this.handleSearch(selectedKeys, confirm, dataIndex, e)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type='primary'\n                    onClick={e => this.handleSearch(selectedKeys, confirm, dataIndex, e)}\n                    icon='search'\n                    size='small'\n                    style={{ width: 90, marginRight: 8 }}>\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size='small' style={{ width: 90 }}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => <SearchOutlined type='search' style={{ color: filtered ? '#1890ff' : undefined }} />,\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select())\n            }\n        },\n        render: (text, record) => {\n            if (this.state.searchedColumn === dataIndex) {\n                return (\n                    <a href={record.subUrl} target='_blank'>\n                        <Highlighter\n                            highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                            searchWords={[this.state.searchText]}\n                            autoEscape\n                            textToHighlight={text.toString()}\n                        />\n                        {record.editorPick === 1 && dataIndex === 'subName' ? (\n                            <Tag color='green-inverse'>编辑选择</Tag>\n                        ) : (\n                            <span></span>\n                        )}\n                    </a>\n                )\n            } else {\n                return (\n                    <a href={record.subUrl} target='_blank'>\n                        {text}\n                        {record.editorPick === 1 && dataIndex === 'subName' ? (\n                            <Tag color='green-inverse'>编辑选择</Tag>\n                        ) : (\n                            <span></span>\n                        )}\n                    </a>\n                )\n            }\n        }\n    })\n\n    handleSearch = (selectedKeys, confirm, dataIndex, e) => {\n        confirm()\n        this.setState({\n            searchText: selectedKeys[0],\n            searchedColumn: dataIndex\n        })\n        if (dataIndex === 'subName') {\n            this.setState(\n                {\n                    name: selectedKeys[0]\n                },\n                () => {\n                    this.handleFetch()\n                }\n            )\n        }\n        if (dataIndex === 'subUrl') {\n            this.setState(\n                {\n                    subUrl: selectedKeys[0]\n                },\n                () => {\n                    this.handleFetch()\n                }\n            )\n        }\n    }\n\n    handleFetch = () => {\n        let request = {\n            pageSize: this.state.pageSize,\n            pageNum: this.state.pageNum,\n            name: this.state.name,\n            subUrl: this.state.subUrl\n        }\n        getChannelList(request)\n    }\n\n    handleReset = clearFilters => {\n        clearFilters()\n        this.setState({ searchText: '' })\n    }\n\n    tabChange = key => {\n        this.setState({\n            defaultActiveKey: key\n        })\n\n        if (key === '1') {\n            let request = {}\n            getChannelList(request)\n        } else if (key === '2') {\n            let request = {\n                minimalReputation: 10,\n                excludeEditorPickChannel: 1\n            }\n            getChannelList(request)\n        } else if (key === '3') {\n            let request = {\n                editorPick: 1\n            }\n            getChannelList(request)\n        }\n    }\n\n    render() {\n        const columns = [\n            {\n                title: 'ID',\n                dataIndex: 'id',\n                key: 'id'\n            },\n            {\n                title: '域名备注',\n                dataIndex: 'domain_name',\n                key: 'domain_name'\n            },\n            {\n                title: '频率配置',\n                dataIndex: 'cron',\n                key: 'cron'\n            },\n            {\n                title: '域名',\n                dataIndex: 'domain_url',\n                key: 'domain_url'\n            },\n            {\n                title: '提前通知（天）',\n                dataIndex: 'days_before_trigger',\n                key: 'days_before_trigger'\n            },\n            {\n                title: '触发检查时间',\n                dataIndex: 'notify_trigger_date',\n                key: 'notify_trigger_date'\n            },\n            {\n                title: '下一次检查时间',\n                dataIndex: 'next_trigger_time',\n                key: 'next_trigger_time'\n            },\n            {\n                title: '证书过期时间',\n                dataIndex: 'expire_date',\n                key: 'expire_date'\n            },\n            {\n                title: '剩余天数',\n                render: text => {\n                    return <span>{dayjs(text.expire_date).diff(new Date(), 'day')}</span>\n                }\n            },\n            {\n                title: '监控状态',\n                dataIndex: 'monitor_status',\n                key: 'monitor_status',\n                render: text => (text === '1' ? <span>{'正常'}</span> : <span>{'停止通知'}</span>)\n            },\n            {\n                title: 'Notify Channel',\n                dataIndex: 'notifyChannels',\n                key: 'notify_channel',\n                render: text => (text === '1' ? <span>{'Bind'}</span> : <span>{'Not Bind Yet'}</span>)\n            },\n            {\n                title: '操作',\n                key: 'action',\n                render: (text, record) => (\n                    <span>\n                        <Button type='primary'>详情</Button>\n                        <Divider type='vertical' />\n                    </span>\n                )\n            }\n        ]\n\n        let data = this.props.domain.domain.list\n        let channel = this.props.domain.domain\n        let total = 0\n        let pageSize = 0\n        let pageNum = 0\n\n        if ((data && Object.keys(data).length === 0) || data === undefined) {\n        } else {\n            total = parseInt(channel.pagination.total)\n            pageSize = channel.pagination.pageSize\n            pageNum = channel.pagination.pageNum\n        }\n\n        const paginationProps = {\n            showSizeChanger: true,\n            showQuickJumper: true,\n            pageSize: pageSize,\n            pageSizeOptions: ['10', '20', '30'],\n            showTotal: () => `共${total}条`,\n            current: pageNum,\n            total: total,\n            onShowSizeChange: (current, pageSize) => this.changePageSize(pageSize, current),\n            onChange: (current, e) => this.onPageChange(current, e)\n        }\n\n        const ChannelTabs = () => (\n            <Tabs defaultActiveKey={this.state.defaultActiveKey} onChange={this.tabChange}>\n                <TabPane tab='全部' key='1'>\n                    <AllChannel />\n                </TabPane>\n            </Tabs>\n        )\n\n        const FilterArea = () => {\n            const [form] = Form.useForm()\n            const showModal = () => {\n                this.setState({\n                    showModal: true\n                })\n            }\n\n            const handleCancel = () => {\n                this.setState({\n                    showModal: false\n                })\n            }\n\n            const onRequiredTypeChange = ({ requiredMarkValue }) => {\n                // setRequiredMarkType(requiredMarkValue);\n            }\n\n            const handleOk = () => {\n                this.setState({\n                    showModal: false\n                })\n            }\n\n            return (\n                <div>\n                    <Button type='primary' onClick={showModal}>\n                        新增\n                    </Button>\n                    <Modal title='新增' visible={this.state.showModal} onOk={handleOk} onCancel={handleCancel}>\n                        <Form form={form} layout='vertical' onValuesChange={onRequiredTypeChange}>\n                            <Form.Item label='域名备注' required tooltip='This is a required field'>\n                                <Input placeholder='input placeholder' />\n                            </Form.Item>\n                            <Form.Item\n                                label='域名'\n                                tooltip={{\n                                    title: 'Tooltip with customize icon',\n                                    icon: <InfoCircleOutlined />\n                                }}>\n                                <Input placeholder='input placeholder' />\n                            </Form.Item>\n                        </Form>\n                    </Modal>\n                </div>\n            )\n        }\n\n        const AllChannel = () => (\n            <Row>\n                <Col>\n                    <div className='base-style'>\n                        <h3 id='basic'>全部域名</h3>\n                        <Divider />\n                        <FilterArea />\n                        <Table\n                            columns={columns}\n                            dataSource={data}\n                            //onChange={this.onChange}\n                            pagination={paginationProps}\n                            rowKey='id'\n                        />\n                    </div>\n                </Col>\n            </Row>\n        )\n\n        return (\n            <Layout className='animated fadeIn'>\n                <div>\n                    <CustomBreadcrumb arr={['应用', 'Cernitor', '域名']}></CustomBreadcrumb>\n                </div>\n                <ChannelTabs />\n            </Layout>\n        )\n    }\n}\n\nexport default withRouter(Domain)\n","import Domain from './Domain.jsx'\n\nexport default Domain\n"],"names":["TabPane","Tabs","Domain","Component","state","loading","pageNum","pageSize","channelId","editorPick","name","defaultActiveKey","showModal","enterLoading","this","setState","onPageChange","current","e","undefined","request","getDomainPage","onChange","pagination","filters","sorter","extra","Object","keys","length","orderByClause","getOrderByClause","cancelSub","text","record","id","subStatus","editChannel","showArticles","props","history","push","encodeURIComponent","editor_pick","editorPickChannel","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","style","padding","ref","node","searchInput","placeholder","value","target","onPressEnter","handleSearch","width","marginBottom","display","type","onClick","icon","size","marginRight","handleReset","filterIcon","filtered","SearchOutlined","color","onFilter","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","searchedColumn","href","subUrl","highlightStyle","backgroundColor","searchWords","searchText","autoEscape","textToHighlight","handleFetch","getChannelList","tabChange","key","minimalReputation","excludeEditorPickChannel","changePageSize","componentDidMount","params","queryString","location","search","subSourceId","componentWillUnmount","notification","timer","clearTimeout","columns","title","dayjs","expire_date","diff","Date","data","domain","list","channel","total","parseInt","paginationProps","showSizeChanger","showQuickJumper","pageSizeOptions","showTotal","onShowSizeChange","ChannelTabs","tab","AllChannel","FilterArea","form","Form","onOk","onCancel","layout","onValuesChange","requiredMarkValue","label","required","tooltip","InfoCircleOutlined","className","dataSource","rowKey","CustomBreadcrumb","arr","withRouter"],"sourceRoot":""}