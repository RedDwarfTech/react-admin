{"version":3,"file":"login.js","mappings":"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","sources":["webpack://react-admin/./src/api/XHRClient.js","webpack://react-admin/./src/service/user/profile/UserService.js","webpack://react-admin/./src/views/Login/Login.jsx","webpack://react-admin/./src/views/Login/index.js"],"sourcesContent":["import axios from 'axios'\nimport store from '../store/index'\nimport { message } from 'antd'\nimport { removeUserAction } from '../actions/UserActions'\n\nlet isRrefreshingAccessToken = false\n// 重试队列，每一项将是一个待执行的函数形式\nlet requests = []\n\nconst instance = axios.create({\n    timeout: 15000\n})\n\ninstance.defaults.headers.post['Content-Type'] = 'application/json'\n\ninstance.interceptors.request.use(\n    config => {\n        const accessToken = localStorage.getItem('accessToken')\n        accessToken && (config.headers['x-access-token'] = accessToken)\n        return config\n    },\n    error => {\n        return Promise.reject(error)\n    }\n)\n\ninstance.interceptors.response.use(\n    response => {\n        if (response.status === 200 && response.data.statusCode === '200' && response.data.resultCode === '200') {\n            return Promise.resolve(response)\n        } else if (response.data.statusCode === '907') {\n            redirectToLogin()\n        } else if (response.data.statusCode === '904') {\n            //登录已失效\n            redirectToLogin()\n        } else if (response.data.resultCode === '00100100004016') {\n            handleRefreshAccessToken(response)\n        } else {\n            let errorMessage = response.data.msg\n            message.error(errorMessage)\n            return Promise.reject(response)\n        }\n    },\n    error => {\n        // 比如： token 过期， 无权限访问， 路径不存在， 服务器问题等\n        switch (error.response.status) {\n            case 401:\n                break\n            case 403:\n                break\n            case 404:\n                break\n            case 500:\n                break\n            default:\n                console.log('其他错误信息')\n        }\n        return Promise.reject(error)\n    }\n)\n\nexport function redirectToLogin() {\n    store.dispatch(removeUserAction(''))\n    window.location.href = '/#/login'\n}\n\nfunction handleRefreshAccessToken(response) {\n    const config = response.config\n    if (!isRrefreshingAccessToken) {\n        isRrefreshingAccessToken = true\n        // access token invalid\n        refreshAccessToken()\n            .then(refreshResult => {\n                let accessToken = refreshResult.accessToken\n                if (accessToken) {\n                    localStorage.setItem('token', accessToken)\n                    localStorage.setItem('accessToken', accessToken)\n                    // retry the last request\n                    instance.defaults.headers['x-access-token'] = accessToken\n                    requests.forEach(cb => cb(accessToken))\n                    requests = []\n                    return instance(config)\n                }\n            })\n            .catch(res => {\n                console.error('refreshtoken error =>', res)\n                redirectToLogin()\n            })\n            .finally(() => {\n                isRrefreshingAccessToken = false\n            })\n    } else {\n        // 正在刷新token，将返回一个未执行resolve的promise\n        return new Promise(resolve => {\n            // 将resolve放进队列，用一个函数形式来保存，等token刷新后直接执行\n            requests.push(token => {\n                config.baseURL = ''\n                config.headers['x-access-token'] = token\n                resolve(instance(config))\n            })\n        })\n    }\n}\n\nfunction refreshAccessToken() {\n    const refreshToken = localStorage.getItem('refreshToken')\n    if (!refreshToken) {\n        redirectToLogin()\n    }\n    return refreshAccessTokenImpl(refreshToken)\n}\n\nfunction refreshAccessTokenImpl(refreshToken) {\n    const urlParams = {\n        deviceId: 'xxxxxx',\n        app: 6,\n        refreshToken: refreshToken\n    }\n    const config = {\n        method: 'post',\n        url: `/manage/auth/access_token/refresh`,\n        data: urlParams\n    }\n    return requestWithoutAction(config)\n}\n\nexport function requestWithAction(config, action) {\n    return instance(config)\n        .then(response => {\n            if (response) {\n                const data =\n                    response.data.result == null || Object.keys(response.data.result).length === 0\n                        ? {}\n                        : response.data.result\n                store.dispatch(action(data))\n            }\n        })\n        .catch(error => {\n            console.error(error)\n        })\n}\n\nexport function requestWithoutAction(config) {\n    return instance(config)\n        .then(response => {\n            if (response) {\n                const data =\n                    response.data.result == null || Object.keys(response.data.result).length === 0\n                        ? {}\n                        : response.data.result\n                return data\n            }\n        })\n        .catch(error => {\n            console.error(error)\n        })\n}\n","import { login, getUserListAction, changeUserPasswordAction } from '@/actions/UserActions'\nimport { requestWithAction, requestWithoutAction } from '@/api/XHRClient'\n\nexport function loginImpl(request) {\n    const config = {\n        method: 'post',\n        url: `/manage/admin/user/login`,\n        data: request\n    }\n    return requestWithAction(config, login)\n}\n\nexport function getUserList(request) {\n    const config = {\n        method: 'post',\n        url: `/manage/user/v1/page`,\n        data: request\n    }\n    return requestWithAction(config, getUserListAction)\n}\n\nexport function modifyPassword(request) {\n    const config = {\n        method: 'post',\n        url: `/manage/user/v1/pwd/edit`,\n        data: request\n    }\n    return requestWithAction(config, changeUserPasswordAction)\n}\n\nexport function removeLoginedUserCache(request) {\n    //store.dispatch(action(removeUserAction))\n}\n","import React, { Component } from 'react'\nimport { Layout, Input, Form, Button, Divider, message, notification } from 'antd'\nimport { withRouter } from 'react-router-dom'\nimport '@/style/view-style/login.scss'\nimport { UserOutlined, LockOutlined } from '@ant-design/icons'\nimport { loginImpl } from '@/service/user/profile/UserService'\nimport FingerprintJS from '@fingerprintjs/fingerprintjs'\n\n// Initialize an agent at application startup.\nconst fpPromise = FingerprintJS.load()\nclass Login extends Component {\n    state = {\n        loading: false\n    }\n\n    enterLoading = () => {\n        this.setState({\n            loading: true\n        })\n    }\n\n    handleLoginSuccess = values => {\n        // let params = queryString.parse(this.props.location.search)\n        // if (Object.keys(params).length !== 0 && params.logined === false) {\n        //    return\n        // }\n        if (values.token && values.token.token) {\n            // 这里可以做权限校验 模拟接口返回用户权限标识\n            switch (values.username) {\n                case 'admin':\n                    values.auth = 0\n                    break\n                default:\n                    values.auth = 0\n            }\n            let token = values.token.accessToken\n            localStorage.setItem('token', token)\n            localStorage.setItem('refreshToken', values.token.refreshToken)\n            localStorage.setItem('accessToken', values.token.accessToken)\n            localStorage.setItem('user', JSON.stringify(values))\n            this.enterLoading()\n            message.success('登录成功!')\n            this.props.history.push('/')\n        }\n    }\n\n    handleLoginSubmit = e => {\n        // https://stackoverflow.com/questions/1873983/what-does-the-leading-semicolon-in-javascript-libraries-do\n        ;(async () =>{\n            // Get the visitor identifier when you need it.\n            const fp = await fpPromise\n            const result = await fp.get()\n            var request = {\n                phone: e.username,\n                password: e.password,\n                deviceId: result.visitorId,\n                app: 6\n            }\n            loginImpl(request)\n        })()\n    }\n\n    componentWillUnmount() {\n        notification.destroy()\n        this.timer && clearTimeout(this.timer)\n    }\n\n    formRef = React.createRef()\n\n    render() {\n        let user = this.props.user\n        this.handleLoginSuccess(user)\n\n        return (\n            <Layout className='login animated fadeIn'>\n                <div className='model'>\n                    <div className='login-form'>\n                        <h3>后台管理系统</h3>\n                        <Divider />\n                        <Form onFinish={this.handleLoginSubmit} ref={this.formRef}>\n                            <Form.Item name='username' rules={[{ required: true, message: '请输入用户名!' }]}>\n                                <Input\n                                    prefix={<UserOutlined type='user' style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                    placeholder='用户名'\n                                />\n                            </Form.Item>\n                            <Form.Item name='password' rules={[{ required: true, message: '请输入密码' }]}>\n                                <Input\n                                    prefix={<LockOutlined type='lock' style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                    type='password'\n                                    placeholder='密码'\n                                />\n                            </Form.Item>\n                            <Form.Item>\n                                <Button\n                                    type='primary'\n                                    htmlType='submit'\n                                    className='login-form-button'\n                                    loading={this.state.loading}>\n                                    登录\n                                </Button>\n                            </Form.Item>\n                        </Form>\n                    </div>\n                </div>\n            </Layout>\n        )\n    }\n}\n\nexport default withRouter(Login)\n","import Login from './Login.jsx'\n\nexport default Login\n"],"names":["isRrefreshingAccessToken","requests","instance","axios","timeout","redirectToLogin","store","removeUserAction","window","location","href","requestWithAction","config","action","then","response","data","result","Object","keys","length","catch","error","console","defaults","headers","post","interceptors","request","use","accessToken","localStorage","getItem","Promise","reject","status","statusCode","resultCode","resolve","errorMessage","msg","message","push","token","baseURL","refreshToken","requestWithoutAction","method","url","deviceId","app","refreshAccessTokenImpl","refreshAccessToken","refreshResult","setItem","forEach","cb","res","finally","handleRefreshAccessToken","log","loginImpl","login","getUserList","getUserListAction","modifyPassword","changeUserPasswordAction","fpPromise","FingerprintJS","Login","Component","state","loading","enterLoading","this","setState","handleLoginSuccess","values","username","auth","JSON","stringify","props","history","handleLoginSubmit","e","fp","get","phone","password","visitorId","formRef","React","componentWillUnmount","notification","timer","clearTimeout","render","user","className","onFinish","ref","name","rules","required","prefix","UserOutlined","type","style","color","placeholder","LockOutlined","htmlType","withRouter"],"sourceRoot":""}